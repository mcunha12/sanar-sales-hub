import streamlit as st
import services
import config

st.set_page_config(page_title="Busca RAG", layout="wide")

st.title("ü§ñ Assistente de Vendas com RAG")
st.write("Fa√ßa uma pergunta sobre nossos cursos e a IA ir√° buscar a informa√ß√£o em nossa base e fornecer insights para sua venda.")

if "rag_messages" not in st.session_state:
    st.session_state.rag_messages = []

for message in st.session_state.rag_messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("Qual a sua d√∫vida?"):
    st.session_state.rag_messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("Analisando e buscando informa√ß√µes..."):
            # Etapa 1: Classificar a inten√ß√£o
            st.write("1Ô∏è‚É£ **Classificando a inten√ß√£o...**")
            specialties = services.classify_query(prompt, config.CLASSIFIER_SYSTEM_PROMPT)
            
            if not specialties:
                st.warning("Nenhuma especialidade espec√≠fica identificada. A busca pode ser menos precisa.")
            else:
                st.write(f"‚úÖ **Especialidades identificadas:** `{'`, `'.join(specialties)}`")
            
            # Etapa 2: Buscar na base de conhecimento via API do Assistente Pinecone
            st.write("2Ô∏è‚É£ **Buscando na base de conhecimento...**")
            # MUDAN√áA: Chamando a nova fun√ß√£o que faz o POST request
            rag_content, citations = services.query_pinecone_assistant(prompt)
            
            if "Erro" in rag_content or "N√£o foi poss√≠vel" in rag_content:
                st.error(rag_content)
            else:
                st.write("‚úÖ **Informa√ß√µes relevantes encontradas!**")
                
                # Etapa 3: Gerar o insight final com o Estrategista de Vendas AI
                st.write("3Ô∏è‚É£ **Gerando insight com o Estrategista de Vendas AI...**")
                final_response = services.get_sales_insight(
                    user_query=prompt,
                    specialties=specialties,
                    rag_content=rag_content,
                    citations=citations,
                    system_prompt=config.SALES_COACH_SYSTEM_PROMPT
                )
                
                st.markdown(final_response)
                st.session_state.rag_messages.append({"role": "assistant", "content": final_response})